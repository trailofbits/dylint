// run-rustfix

#![allow(unused_imports, unused_parens)]

use std::{
    borrow::{Borrow, BorrowMut},
    ffi::{OsStr, OsString},
    io::Read,
    ops::{Deref, DerefMut},
    path::{Path, PathBuf},
    process::Command,
};
use tempfile::{NamedTempFile, TempDir};

fn main() {
    let mut readable = Box::new(&[] as &[u8]);
    let mut s = String::new();
    let mut vec = Vec::<u8>::new();
    let osstr = OsStr::new("");
    let osstring = OsString::new();
    let path = Path::new("x");
    let path_buf = PathBuf::from("x");
    let tempdir = TempDir::new().unwrap();
    let tempfile = NamedTempFile::new().unwrap();

    // trait methods

    let _ = std::fs::write("x", "");

    let _ = std::fs::write("x", "");

    let _ = std::fs::write("x", "");

    read(&mut readable);
    read(&mut readable);

    read(&mut readable);

    let _ = std::fs::write("x", "");
    let _ = std::fs::write("x", "");

    let _ = std::fs::write("x", "");

    read(&mut readable);

    // inherent methods

    let _ = std::fs::write("x", (Box::new([]) as Box<[u8]>));
    let _ = std::fs::write("x", (&[] as &[u8]));

    let _ = is_empty(s.clone());
    let _ = is_empty(s.clone());

    let _ = std::fs::write("x", &s);
    let _ = std::fs::write("x", &mut s);
    let _ = std::fs::write("x", &s);
    let _ = is_empty(s.clone());
    let _ = std::fs::write("x", s.clone());

    let _ = std::fs::write("x", &mut vec);
    let _ = std::fs::write("x", &vec);
    let _ = std::fs::write("x", vec);

    let _ = Command::new("ls").args(["-a", "-l"]);
    let _ = Command::new("ls").args(["-a", "-l"]);

    let _ = std::fs::write("x", "");

    let _ = is_empty_os(osstring.clone());
    let _ = std::fs::write("x", "");
    let _ = std::fs::write(osstr, "");

    let _ = std::fs::write(&osstring, "");
    let _ = is_empty_os(osstring.clone());

    let _ = std::fs::write(path, "");
    let _ = std::fs::write(PathBuf::from("x"), "");
    let _ = Command::new("ls").args(path);
    let _ = std::fs::write("x", "");
    let _ = std::fs::write(path, "");

    let _ = std::fs::write(&path_buf, "");
    let _ = std::fs::write(path_buf.clone(), "");

    let _ = std::fs::write(&tempdir, "");
    let _ = std::fs::write(&tempfile, "");
}

fn read(_: impl Read) {}

#[must_use]
fn is_empty<T: From<Box<str>> + PartialEq>(x: T) -> bool {
    x == T::from(String::new().into_boxed_str())
}

#[must_use]
fn is_empty_os<T: From<Box<OsStr>> + PartialEq>(x: T) -> bool {
    x == T::from(OsString::new().into_boxed_os_str())
}
